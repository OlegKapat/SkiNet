{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\n\nfunction BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const breadcrumb_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.label);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"xng-breadcrumb-link-disabled\": a0\n  };\n};\n\nconst _c1 = function (a0, a1, a2, a3, a4, a5) {\n  return {\n    $implicit: a0,\n    info: a1,\n    last: a2,\n    first: a3,\n    index: a4,\n    count: a5\n  };\n};\n\nfunction BreadcrumbComponent_ng_container_2_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 7);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    const breadcrumb_r1 = ctx_r12.$implicit;\n    const isLast_r2 = ctx_r12.last;\n    const isFirst_r3 = ctx_r12.first;\n    const index_r4 = ctx_r12.index;\n    const count_r5 = ctx_r12.count;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, breadcrumb_r1.disable))(\"routerLink\", breadcrumb_r1.routeInterceptor ? breadcrumb_r1.routeInterceptor(breadcrumb_r1.routeLink, breadcrumb_r1) : breadcrumb_r1.routeLink)(\"queryParams\", ctx_r6.preserveQueryParams ? breadcrumb_r1.queryParams : undefined)(\"fragment\", ctx_r6.preserveFragment ? breadcrumb_r1.fragment : undefined)(\"target\", ctx_r6.anchorTarget ? ctx_r6.anchorTarget : \"_self\");\n    i0.ɵɵattribute(\"aria-disabled\", breadcrumb_r1.disable)(\"tabIndex\", breadcrumb_r1.disable ? -1 : 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(12, _c1, breadcrumb_r1.label, breadcrumb_r1.info, isLast_r2, isFirst_r3, index_r4, count_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.itemTemplate);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const breadcrumb_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.label);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    const breadcrumb_r1 = ctx_r16.$implicit;\n    const isLast_r2 = ctx_r16.last;\n    const isFirst_r3 = ctx_r16.first;\n    const index_r4 = ctx_r16.index;\n    const count_r5 = ctx_r16.count;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(3, _c1, breadcrumb_r1.label, breadcrumb_r1.info, isLast_r2, isFirst_r3, index_r4, count_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.itemTemplate);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.separator);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.separatorTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r8.separatorTemplate);\n  }\n}\n\nfunction BreadcrumbComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 3);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_a_2_Template, 3, 19, \"a\", 4);\n    i0.ɵɵtemplate(3, BreadcrumbComponent_ng_container_2_label_3_Template, 3, 10, \"label\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, BreadcrumbComponent_ng_container_2_li_4_Template, 3, 2, \"li\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const isLast_r2 = ctx.last;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", isLast_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n  }\n}\n\nclass BreadcrumbItemDirective {}\n\nBreadcrumbItemDirective.ɵfac = function BreadcrumbItemDirective_Factory(t) {\n  return new (t || BreadcrumbItemDirective)();\n};\n\nBreadcrumbItemDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BreadcrumbItemDirective,\n  selectors: [[\"\", \"xngBreadcrumbItem\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbItemDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[xngBreadcrumbItem]'\n    }]\n  }], null, null);\n})();\n\nconst PATH_PARAM = {\n  PREFIX: ':',\n  REGEX_IDENTIFIER: '/:[^/]+',\n  REGEX_REPLACER: '/[^/]+'\n};\nconst ALIAS_PREFIX = '@';\n\nconst isNonEmpty = obj => {\n  return obj && Object.keys(obj).length > 0;\n};\n\nclass BreadcrumbService {\n  constructor(activatedRoute, router) {\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.baseHref = '/';\n    /**\n     * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n     * Breadcrumbs can be set from anywhere (component, service) in the app.\n     * On every breadcrumb update check this store and use the info if available.\n     */\n\n    this.dynamicBreadcrumbStore = [];\n    /**\n     * breadcrumbList for the current route\n     * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n     * If effected, update the change and emit a new stream\n     */\n\n    this.currentBreadcrumbs = [];\n    this.previousBreadcrumbs = [];\n    /**\n     * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n     * Emits on every route change OR dynamic update of breadcrumb\n     */\n\n    this.breadcrumbs = new BehaviorSubject([]);\n    this.breadcrumbs$ = this.breadcrumbs.asObservable();\n    this.detectRouteChanges();\n  }\n  /**\n   * Whenever route changes build breadcrumb list again\n   */\n\n\n  detectRouteChanges() {\n    // Special case where breadcrumb service & component instantiates after a route is navigated.\n    // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n    // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n    this.setupBreadcrumbs(this.activatedRoute.snapshot);\n    this.router.events.pipe(filter(event => event instanceof GuardsCheckEnd)).subscribe(event => {\n      // activatedRoute doesn't carry data when shouldReuseRoute returns false\n      // use the event data with GuardsCheckEnd as workaround\n      // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n      if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n        this.setupBreadcrumbs(event.state.root);\n      }\n    });\n  }\n\n  setupBreadcrumbs(activatedRouteSnapshot) {\n    this.previousBreadcrumbs = this.currentBreadcrumbs; // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n\n    const rootBreadcrumb = this.getRootBreadcrumb();\n    this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n    this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n  }\n\n  getRootBreadcrumb() {\n    var _a;\n\n    const rootConfig = this.router.config.find(config => config.path === '');\n    const rootBreadcrumb = this.extractObject((_a = rootConfig === null || rootConfig === void 0 ? void 0 : rootConfig.data) === null || _a === void 0 ? void 0 : _a.breadcrumb);\n    const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n\n    if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n      return Object.assign(Object.assign(Object.assign(Object.assign({}, storeItem), rootBreadcrumb), {\n        routeLink: this.baseHref\n      }), this.getQueryParamsFromPreviousList('/'));\n    }\n  }\n\n  prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n    const {\n      path,\n      breadcrumb\n    } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n    const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n    const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n    const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n    const label = this.extractLabel((storeItem === null || storeItem === void 0 ? void 0 : storeItem.label) || (breadcrumb === null || breadcrumb === void 0 ? void 0 : breadcrumb.label), resolvedSegment);\n    let isAutoGeneratedLabel = false;\n    let autoGeneratedLabel = '';\n\n    if (!label) {\n      isAutoGeneratedLabel = true;\n      autoGeneratedLabel = resolvedSegment;\n    }\n\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, storeItem), breadcrumb), {\n      label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n      routeLink,\n      isAutoGeneratedLabel\n    }), this.getQueryParamsFromPreviousList(routeLink));\n  }\n\n  prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n    var _a;\n\n    if ((_a = activatedRouteSnapshot.routeConfig) === null || _a === void 0 ? void 0 : _a.path) {\n      const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n      this.currentBreadcrumbs.push(breadcrumbItem);\n\n      if (activatedRouteSnapshot.firstChild) {\n        return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n      }\n    } else if (activatedRouteSnapshot.firstChild) {\n      return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n    }\n\n    const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n    this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot); // remove breadcrumb items that needs to be hidden\n\n    const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n    this.breadcrumbs.next(breadcrumbsToShow);\n  }\n\n  getFromStore(alias, routeLink) {\n    return this.dynamicBreadcrumbStore.find(item => {\n      return alias && alias === item.alias || routeLink && routeLink === item.routeLink || this.matchRegex(routeLink, item.routeRegex);\n    });\n  }\n  /**\n   * use exact match instead of regexp.test\n   * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n   */\n\n\n  matchRegex(routeLink, routeRegex) {\n    const match = routeLink.match(new RegExp(routeRegex));\n    return (match === null || match === void 0 ? void 0 : match[0]) === routeLink;\n  }\n  /**\n   * if the path segment has route params, read the param value from url\n   * for each segment of route this gets called\n   *\n   * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n   */\n\n\n  resolvePathSegment(segment, activatedRouteSnapshot) {\n    //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n    if (segment.includes(PATH_PARAM.PREFIX)) {\n      Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n        segment = segment.replace(`:${key}`, `${value}`);\n      });\n    }\n\n    return segment;\n  }\n  /**\n   * queryParams & fragments for previous breadcrumb path are copied over to new list\n   */\n\n\n  getQueryParamsFromPreviousList(routeLink) {\n    const {\n      queryParams,\n      fragment\n    } = this.previousBreadcrumbs.find(item => item.routeLink === routeLink) || {};\n    return {\n      queryParams,\n      fragment\n    };\n  }\n  /**\n   * set current activated route query params to the last breadcrumb item\n   */\n\n\n  setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n    if (lastItem) {\n      const {\n        queryParams,\n        fragment\n      } = activatedRouteSnapshot;\n      lastItem.queryParams = queryParams ? Object.assign({}, queryParams) : undefined;\n      lastItem.fragment = fragment;\n    }\n  }\n  /**\n   * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n   * When both are defined, child takes precedence\n   *\n   * Ex: Below we are setting breadcrumb on both parent and child.\n   * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n   * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n   *                                                AND\n   * children: [\n   *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n   * ]\n   */\n\n\n  parseRouteData(routeConfig) {\n    const {\n      path,\n      data\n    } = routeConfig;\n    const breadcrumb = this.mergeWithBaseChildData(routeConfig, data === null || data === void 0 ? void 0 : data.breadcrumb);\n    return {\n      path,\n      breadcrumb\n    };\n  }\n  /**\n   * get empty children of a module or Component. Empty child is the one with path: ''\n   * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n   */\n\n\n  mergeWithBaseChildData(routeConfig, config) {\n    var _a;\n\n    if (!routeConfig) {\n      return this.extractObject(config);\n    }\n\n    let baseChild;\n\n    if (routeConfig.loadChildren) {\n      // To handle a module with empty child route\n      baseChild = routeConfig._loadedConfig.routes.find(route => route.path === '');\n    } else if (routeConfig.children) {\n      // To handle a component with empty child route\n      baseChild = routeConfig.children.find(route => route.path === '');\n    }\n\n    const childConfig = (_a = baseChild === null || baseChild === void 0 ? void 0 : baseChild.data) === null || _a === void 0 ? void 0 : _a.breadcrumb;\n    return childConfig ? this.mergeWithBaseChildData(baseChild, Object.assign(Object.assign({}, this.extractObject(config)), this.extractObject(childConfig))) : this.extractObject(config);\n  }\n  /**\n   * Update breadcrumb dynamically\n   *\n   * key can be a path | alias\n   *\n   * 1) Using complete route path. route can be passed the same way you define angular routes\n   * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n   * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n   * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n   * ------------------------------------------ OR ------------------------------------------\n   * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n   * - update label Ex: set('@mentor', 'Enabler')\n   * - change visibility Ex: set('@mentorEdit', { skip: true })\n   *\n   *\n   * value can be string | BreadcrumbObject | BreadcrumbFunction\n   */\n\n\n  set(key, breadcrumb) {\n    const breadcrumbObject = this.extractObject(breadcrumb);\n    let updateArgs;\n\n    if (key.startsWith(ALIAS_PREFIX)) {\n      updateArgs = ['alias', Object.assign(Object.assign({}, breadcrumbObject), {\n        alias: key.slice(1)\n      })];\n    } else if (key.includes(PATH_PARAM.PREFIX)) {\n      updateArgs = ['routeRegex', Object.assign(Object.assign({}, breadcrumbObject), {\n        routeRegex: this.buildRegex(key)\n      })];\n    } else {\n      updateArgs = ['routeLink', Object.assign(Object.assign({}, breadcrumbObject), {\n        routeLink: this.ensureLeadingSlash(key)\n      })];\n    } // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n    // change it to false since this is user supplied value\n\n\n    updateArgs[1].isAutoGeneratedLabel = false;\n    this.updateStore(...updateArgs);\n    this.updateCurrentBreadcrumbs(...updateArgs);\n  }\n  /**\n   * Update the store to reuse for dynamic declarations\n   * If the store already has this route definition update it, else add\n   */\n\n\n  updateStore(key, breadcrumb) {\n    const storeItemIndex = this.dynamicBreadcrumbStore.findIndex(item => {\n      return breadcrumb[key] === item[key];\n    });\n\n    if (storeItemIndex > -1) {\n      this.dynamicBreadcrumbStore[storeItemIndex] = Object.assign(Object.assign({}, this.dynamicBreadcrumbStore[storeItemIndex]), breadcrumb);\n    } else {\n      this.dynamicBreadcrumbStore.push(Object.assign({}, breadcrumb));\n    }\n  }\n  /**\n   * If breadcrumb is present in current breadcrumbs update it and emit new stream\n   */\n\n\n  updateCurrentBreadcrumbs(key, breadcrumb) {\n    const itemIndex = this.currentBreadcrumbs.findIndex(item => {\n      return key === 'routeRegex' ? this.matchRegex(item.routeLink, breadcrumb[key]) : breadcrumb[key] === item[key];\n    });\n\n    if (itemIndex > -1) {\n      this.currentBreadcrumbs[itemIndex] = Object.assign(Object.assign({}, this.currentBreadcrumbs[itemIndex]), breadcrumb);\n      const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n      this.breadcrumbs.next([...breadcrumbsToShow]);\n    }\n  }\n  /**\n   * For a route with path param, we create regex dynamically from angular route syntax\n   * '/mentor/:id' becomes '/mentor/[^/]',\n   * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n   */\n\n\n  buildRegex(path) {\n    return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n  }\n\n  ensureLeadingSlash(path) {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n  /**\n   * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n   *\n   * string: simple static breadcrumb label for a path\n   * function: callback that gets invoked with resolved path param\n   * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n   */\n\n\n  extractLabel(config, resolvedParam) {\n    const label = typeof config === 'object' ? config.label : config;\n\n    if (typeof label === 'function') {\n      return label(resolvedParam);\n    }\n\n    return label;\n  }\n\n  extractObject(config) {\n    // don't include {label} if config is undefined. This is important since we merge the configs\n    if (config && (typeof config === 'string' || typeof config === 'function')) {\n      return {\n        label: config\n      };\n    }\n\n    return config || {};\n  }\n\n}\n\nBreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) {\n  return new (t || BreadcrumbService)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router));\n};\n\nBreadcrumbService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BreadcrumbService,\n  factory: BreadcrumbService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ActivatedRoute\n    }, {\n      type: i1.Router\n    }];\n  }, null);\n})();\n\nclass BreadcrumbComponent {\n  constructor(breadcrumbService, activateRoute) {\n    this.breadcrumbService = breadcrumbService;\n    this._separator = '/';\n    /**\n     * If true, breadcrumb is auto generated even without any mapping label\n     * Default label is same as route segment\n     */\n\n    this.autoGenerate = true;\n    /**\n     * By default query params will be preserved with breadcrumbs\n     */\n\n    this.preserveQueryParams = true;\n    /**\n     * By default query fragments will be preserved with breadcrumbs\n     */\n\n    this.preserveFragment = true;\n    /**\n     * custom class provided by consumer to increase specificity\n     * This will benefit to override styles that are conflicting\n     */\n\n    this.class = '';\n    this.setupMessage = 'not set up yet';\n    this.someParameterValue = null; // breadcrumb inside ngIf works only this way\n\n    activateRoute.params.subscribe(params => {\n      this.setupComponent(params['someParam']);\n    });\n  }\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n\n\n  set separator(value) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n\n  get separator() {\n    return this._separator;\n  }\n\n  setupComponent(someParam) {\n    this.setupMessage = 'set up at ' + new Date();\n    this.someParameterValue = someParam;\n  }\n\n  ngOnInit() {\n    this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map(breadcrumbs => {\n      return breadcrumbs.filter(breadcrumb => {\n        // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n        // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n        if (this.autoGenerate) {\n          return true;\n        }\n\n        return !breadcrumb.isAutoGeneratedLabel;\n      }).map(breadcrumb => {\n        // Do not mutate breadcrumb as its source of truth.\n        // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n        const {\n          routeInterceptor,\n          routeLink\n        } = breadcrumb;\n        return Object.assign(Object.assign({}, breadcrumb), {\n          routeLink: (routeInterceptor === null || routeInterceptor === void 0 ? void 0 : routeInterceptor(routeLink, breadcrumb)) || routeLink\n        });\n      });\n    }));\n  }\n\n}\n\nBreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) {\n  return new (t || BreadcrumbComponent)(i0.ɵɵdirectiveInject(BreadcrumbService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\n\nBreadcrumbComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BreadcrumbComponent,\n  selectors: [[\"xng-breadcrumb\"]],\n  contentQueries: function BreadcrumbComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, BreadcrumbItemDirective, 5, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);\n    }\n  },\n  inputs: {\n    autoGenerate: \"autoGenerate\",\n    preserveQueryParams: \"preserveQueryParams\",\n    preserveFragment: \"preserveFragment\",\n    class: \"class\",\n    anchorTarget: \"anchorTarget\",\n    separator: \"separator\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[\"aria-label\", \"breadcrumb\", 1, \"xng-breadcrumb-root\", 3, \"ngClass\"], [1, \"xng-breadcrumb-list\"], [4, \"ngFor\", \"ngForOf\"], [1, \"xng-breadcrumb-item\"], [\"class\", \"xng-breadcrumb-link\", \"role\", \"button\", \"rel\", \"noopener noreferrer\", 3, \"ngClass\", \"routerLink\", \"queryParams\", \"fragment\", \"target\", 4, \"ngIf\"], [\"class\", \"xng-breadcrumb-trail\", 4, \"ngIf\"], [\"class\", \"xng-breadcrumb-separator\", \"aria-hidden\", \"true\", \"role\", \"separator\", 4, \"ngIf\"], [\"role\", \"button\", \"rel\", \"noopener noreferrer\", 1, \"xng-breadcrumb-link\", 3, \"ngClass\", \"routerLink\", \"queryParams\", \"fragment\", \"target\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [1, \"xng-breadcrumb-trail\"], [\"aria-hidden\", \"true\", \"role\", \"separator\", 1, \"xng-breadcrumb-separator\"], [4, \"ngTemplateOutlet\"]],\n  template: function BreadcrumbComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0)(1, \"ol\", 1);\n      i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_Template, 5, 3, \"ng-container\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", ctx.class);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 2, ctx.breadcrumbs$));\n    }\n  },\n  directives: [i3.NgClass, i3.NgForOf, i3.NgIf, i1.RouterLinkWithHref, i3.NgTemplateOutlet],\n  pipes: [i3.AsyncPipe],\n  styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbComponent, [{\n    type: Component,\n    args: [{\n      selector: 'xng-breadcrumb',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li\\n        *ngIf=\\\"!isLast\\\"\\n        class=\\\"xng-breadcrumb-separator\\\"\\n        aria-hidden=\\\"true\\\"\\n        role=\\\"separator\\\"\\n      >\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\",\n      styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: BreadcrumbService\n    }, {\n      type: i1.ActivatedRoute\n    }];\n  }, {\n    itemTemplate: [{\n      type: ContentChild,\n      args: [BreadcrumbItemDirective, {\n        static: false,\n        read: TemplateRef\n      }]\n    }],\n    autoGenerate: [{\n      type: Input\n    }],\n    preserveQueryParams: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input\n    }],\n    class: [{\n      type: Input\n    }],\n    anchorTarget: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input,\n      args: ['separator']\n    }]\n  });\n})();\n\nclass BreadcrumbModule {}\n\nBreadcrumbModule.ɵfac = function BreadcrumbModule_Factory(t) {\n  return new (t || BreadcrumbModule)();\n};\n\nBreadcrumbModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BreadcrumbModule\n});\nBreadcrumbModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RouterModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n      imports: [CommonModule, RouterModule],\n      exports: [BreadcrumbComponent, BreadcrumbItemDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };","map":{"version":3,"names":["i0","Directive","Injectable","TemplateRef","Component","ViewEncapsulation","ContentChild","Input","NgModule","filter","map","i1","GuardsCheckEnd","RouterModule","BehaviorSubject","i3","CommonModule","BreadcrumbItemDirective","ɵfac","ɵdir","type","args","selector","PATH_PARAM","PREFIX","REGEX_IDENTIFIER","REGEX_REPLACER","ALIAS_PREFIX","isNonEmpty","obj","Object","keys","length","BreadcrumbService","constructor","activatedRoute","router","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","events","pipe","event","subscribe","shouldActivate","state","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","_a","rootConfig","config","find","path","extractObject","data","breadcrumb","storeItem","getFromStore","alias","assign","routeLink","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","label","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","lastCrumb","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","item","skip","next","matchRegex","routeRegex","match","RegExp","segment","includes","entries","params","forEach","key","value","replace","queryParams","fragment","lastItem","undefined","mergeWithBaseChildData","baseChild","loadChildren","_loadedConfig","routes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ActivatedRoute","Router","ɵprov","providedIn","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","preserveQueryParams","preserveFragment","class","setupMessage","someParameterValue","setupComponent","separator","separatorTemplate","someParam","Date","ngOnInit","routeInterceptor","ɵcmp","NgClass","NgForOf","NgIf","RouterLinkWithHref","NgTemplateOutlet","AsyncPipe","encapsulation","None","template","styles","itemTemplate","static","read","anchorTarget","BreadcrumbModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["D:/Skinetnew-lessons/client/node_modules/xng-breadcrumb/fesm2015/xng-breadcrumb.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport { filter, map } from 'rxjs/operators';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event instanceof GuardsCheckEnd && event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        var _a;\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject((_a = rootConfig === null || rootConfig === void 0 ? void 0 : rootConfig.data) === null || _a === void 0 ? void 0 : _a.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return Object.assign(Object.assign(Object.assign(Object.assign({}, storeItem), rootBreadcrumb), { routeLink: this.baseHref }), this.getQueryParamsFromPreviousList('/'));\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel((storeItem === null || storeItem === void 0 ? void 0 : storeItem.label) || (breadcrumb === null || breadcrumb === void 0 ? void 0 : breadcrumb.label), resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return Object.assign(Object.assign(Object.assign(Object.assign({}, storeItem), breadcrumb), { label: isAutoGeneratedLabel ? autoGeneratedLabel : label, routeLink,\n            isAutoGeneratedLabel }), this.getQueryParamsFromPreviousList(routeLink));\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        var _a;\n        if ((_a = activatedRouteSnapshot.routeConfig) === null || _a === void 0 ? void 0 : _a.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return (match === null || match === void 0 ? void 0 : match[0]) === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? Object.assign({}, queryParams) : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data === null || data === void 0 ? void 0 : data.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        var _a;\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedConfig.routes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = (_a = baseChild === null || baseChild === void 0 ? void 0 : baseChild.data) === null || _a === void 0 ? void 0 : _a.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, Object.assign(Object.assign({}, this.extractObject(config)), this.extractObject(childConfig)))\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', Object.assign(Object.assign({}, breadcrumbObject), { alias: key.slice(1) })];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                Object.assign(Object.assign({}, breadcrumbObject), { routeRegex: this.buildRegex(key) }),\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                Object.assign(Object.assign({}, breadcrumbObject), { routeLink: this.ensureLeadingSlash(key) }),\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = Object.assign(Object.assign({}, this.dynamicBreadcrumbStore[storeItemIndex]), breadcrumb);\n        }\n        else {\n            this.dynamicBreadcrumbStore.push(Object.assign({}, breadcrumb));\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = Object.assign(Object.assign({}, this.currentBreadcrumbs[itemIndex]), breadcrumb);\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return Object.assign(Object.assign({}, breadcrumb), { routeLink: (routeInterceptor === null || routeInterceptor === void 0 ? void 0 : routeInterceptor(routeLink, breadcrumb)) || routeLink });\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li\\n        *ngIf=\\\"!isLast\\\"\\n        class=\\\"xng-breadcrumb-separator\\\"\\n        aria-hidden=\\\"true\\\"\\n        role=\\\"separator\\\"\\n      >\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\", \"routerLink\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], pipes: { \"async\": i3.AsyncPipe }, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li\\n        *ngIf=\\\"!isLast\\\"\\n        class=\\\"xng-breadcrumb-separator\\\"\\n        aria-hidden=\\\"true\\\"\\n        role=\\\"separator\\\"\\n      >\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, imports: [[CommonModule, RouterModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}